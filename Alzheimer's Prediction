import os
import torch
from torchvision import transforms
from PIL import Image
from torchvision.models import vit_b_16
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load the pretrained Vision Transformer model
model = vit_b_16(pretrained=True)
model.eval()

# Define the image transformations
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(0.5, 0.5)
])

def classify_image(image_path):
    # Load the image
    image = Image.open(image_path)

    # Convert grayscale to RGB if necessary
    if image.mode != 'RGB':
        image = image.convert('RGB')

    # Apply the transformations
    image = transform(image).unsqueeze(0)

    # Perform inference
    with torch.no_grad():
        outputs = model(image)
        _, predicted = torch.max(outputs, 1)

    return predicted.item()
    


def calculate_accuracy(image_paths, true_labels):
    correct = 0

    for i, image_path in enumerate(image_paths):
        predicted_class = classify_image(image_path)
        print(predicted_class)
        correct += (predicted_class == true_labels[i])

    accuracy = correct / len(image_paths)
    return accuracy

# Initialize ImageDataGenerator
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    r'/home/rcui/project/Intel_Image/Images/seg_test/seg_test', 
    target_size=(224, 224),
    class_mode='sparse',
    shuffle=False,
    batch_size=1
)

# Extract image paths and true labels
image_paths = test_generator.filepaths
true_labels = test_generator.classes

# Calculate accuracy
accuracy = calculate_accuracy(image_paths, true_labels)
print(f'Accuracy: {accuracy}')

